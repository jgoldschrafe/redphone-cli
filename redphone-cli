#!/usr/bin/env ruby

require 'rubygems'
require 'commander'
require 'logger'
require 'mixlib/shellout'
require 'redphone/pagerduty'
require 'yaml'

$logger = Logger.new(STDOUT)
$logger.level = Logger::WARN

def global_defaults
  { config_file: '/etc/redphone/redphone.yml' }
end

def hostname
  %x(hostname).chomp
end

def make_defaults(options={})
  global_defaults.merge(options)
end

module RedphoneCli
  class OptionValidationError < Exception
  end

  class Command
    class << self
      attr_accessor :argument_validations
      attr_accessor :config_section
      attr_accessor :option_validations
    end

    def self.inherited(subclass)
      %w(argument_validations config_section option_validations).each do |var|
        subclass.send :"#{var}=", send(var)
      end
    end

    def self.imports_from_config(section)
      @config_section = section
    end

    def self.validates_option(option, settings)
      @option_validations ||= []
      @option_validations << [option, settings]
    end

    attr_accessor :arguments
    attr_accessor :options

    def initialize(arguments, options)
      self.arguments = arguments
      self.options = load_options_from_config(options.config_file).merge(options.__hash__)
      validate_options
    end

    def load_options_from_config(config_file)
      return {} unless File.exist?(config_file)

      config = YAML.load_file(config_file)
      return {} unless config.has_key?(config_section)

      config[config_section]
    end

    private

    def argument_validations
      self.class.argument_validations || []
    end

    def config_section
      self.class.config_section
    end

    def option_validations
      self.class.option_validations || []
    end

    def validate_options
      option_validations.each do |option, params|
        if params[:required] and options[option].nil?
          raise OptionValidationError, "Required option '#{option}' not provided"
        end

        if params[:kind_of] and not (options[option].kind_of?(params[:kind_of]) or options[option].nil?)
          raise OptionValidationError, "Expected option '#{option}' to be a kind of #{params[:kind_of]}"
        end
      end
    end
  end

  class PagerdutyBase < Command
    imports_from_config :pagerduty

    validates_option :client,
      required: false,
      kind_of: String

    validates_option :details,
      required: false,
      kind_of: String

    validates_option :service_key,
      required: true,
      kind_of: String

    validates_option :subdomain,
      required: true,
      kind_of: String
  end

  class PagerdutyIncidentFromCommand < PagerdutyBase
    validates_option :incident_key,
      required: true,
      kind_of: String

    def run
      validate_arguments
      cmd = Mixlib::ShellOut.new(arguments)
      $logger.debug "Running command: #{arguments.inspect}"
      result = cmd.run_command
      if result.status.success?
        resolve_incident result
      else
        trigger_incident result
      end
    end

    private

    def description_for_trigger(result)
      if result.stdout.length > 0
        output = result.stdout
      elsif result.stderr.length > 0
        output = result.stderr
      else
        output = 'No output provided'
      end

      "Command #{arguments.inspect} returned output:\n\n#{output}"
    end

    def options_for_resolve(result)
      {
        incident_key: options[:incident_key],
        service_key: options[:service_key]
      }
    end

    def options_for_trigger(result)
      {
        client: options[:client],
        client_url: options[:client_url],
        description: description_for_trigger(result),
        details: options[:details] || { stderr: result.stderr, stdout: result.stdout },
        incident_key: options[:incident_key],
        service_key: options[:service_key]
      }
    end

    def resolve_incident(result)
      options = options_for_resolve(result)
      $logger.debug "Command returned success, resolving incident with options: #{options}"
      resp = Redphone::Pagerduty.resolve_incident(options)
      if resp['status'] == 'success'
        $logger.debug 'Successfully resolved PagerDuty incident'
      else
        $logger.error "Failed to resolve PagerDuty incident; got response: #{resp['message']}"
        exit 1
      end
    end

    def trigger_incident(result)
      options = options_for_trigger(result)
      $logger.debug "Command returned failure, triggering incident with options: #{options}"
      resp = Redphone::Pagerduty.trigger_incident(options)
      if resp['status'] == 'success'
        $logger.debug 'Successfully triggered PagerDuty incident'
      else
        $logger.error "Failed to trigger PagerDuty incident; got response: #{resp['message']}"
        exit 1
      end
    end

    def validate_arguments
      if arguments.empty?
        raise OptionValidationError, 'No command specified!'
      end
    end
  end
end

Commander.configure do
  program :name, 'redphone-cli'
  program :version, '0.1.0'
  program :description, 'CLI for interacting with monitoring services'
  program :help, 'Author', 'Jeff Goldschrafe <jeff@rabb.it>'

  global_option('-d', '--debug', 'Enable debug logging') { $logger.level = Logger::DEBUG }
  global_option('-f', '--config-file FILE', String, 'Configuration file to load')

  command :'pagerduty incident from command' do |c|
    c.option('--client STRING', String, 'Name of the client triggering the event')
    c.option('--service-key STRING', String, 'PagerDuty service API key')
    c.option('--subdomain STRING', String, 'PagerDuty subdomain')
    c.option('--incident-key STRING', String, 'Incident key identifying the incident')
    c.option('--details STRING', String, 'JSON metadata to be stored with the event')

    c.action do |args, options|
      options.default make_defaults(client: hostname)
      cmd = RedphoneCli::PagerdutyIncidentFromCommand.new(args, options)
      cmd.run
    end
  end
end
